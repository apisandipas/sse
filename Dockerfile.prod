FROM node:20 AS client-build

# Set the working directory for the client app
WORKDIR /app/client

# Copy the package.json and yarn.lock first to leverage Docker cache for dependencies
COPY client/package.json client/yarn.lock ./

# Install dependencies
RUN yarn install

# Copy the rest of the client app source code
COPY client/ ./

# Build the React app using Vite for production
RUN yarn build

# Stage 2: Setup the NestJS server with static files served by the server
FROM node:20 AS server-build

# Set the working directory for the server app
WORKDIR /app/server

# Copy the serverâ€™s package.json and yarn.lock first
COPY server/package.json server/yarn.lock ./

# Install server dependencies
RUN yarn install

# Copy the server app's source code
COPY server/ ./

# Build the NestJS server (compiled TypeScript files)
RUN yarn build

FROM node:20 AS production

WORKDIR /app/server

# Copy the React build output from the client-build stage
COPY --from=client-build /app/client/dist ./public

# Copy the built NestJS server from the server-build stage
COPY --from=server-build /app/server/dist ./dist

# Copy only the necessary server files
COPY server/package.json ./package.json
COPY server/yarn.lock ./yarn.lock
COPY server/prisma ./prisma
COPY server/.env ./.env

# Install only production dependencies
RUN yarn install --production

# Set environment variables
ENV NODE_ENV=production

# Expose the server port
EXPOSE 5000

# Command to start the server
CMD ["sh", "-c", "npx prisma migrate deploy && node dist/main.js"]
